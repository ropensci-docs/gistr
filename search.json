[{"path":[]},{"path":"https://docs.ropensci.org/gistr/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/gistr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/gistr.git Make sure track progress upstream (.e., version gistr ropensci/gistr) git remote add upstream https://github.com/ropensci/gistr.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs Push account Submit pull request home base ropensci/gistr","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"gistr introduction","text":"Stable version CRAN Development version GitHub","code":"install.packages(\"gistr\") remotes::install_github(\"ropensci/gistr\") library(\"gistr\")"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication","title":"gistr introduction","text":"two ways authorise gistr work GitHub account: test approach, execute R: Sys.setenv(GITHUB_PAT = \"blahblahblah\"), “blahblahblah” PAT got GitHub. take gistr test drive. works, probably want define GITHUB_PAT environment variable file ~/.bash_profile ~/.Renviron. Interactively login GitHub account authorise OAuth. Using PAT recommended. Using gist_auth() function can authenticate separately first, ’re authenticated, function run internally function call. PAT, used, , OAuth used.","code":"gist_auth()"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"gistr introduction","text":"gistr can use pipes, introduced perhaps first R package magrittr, pass outputs one function another. used dplyr pipes can see difference, perhaps utility, workflow traditional workflow R. can use non-piping piping workflow gistr. Examples use mix workflows. example piping workflow (explanation): non-piping workflow exact thing: string together one line (’s rather difficult follow ’s going read inside )","code":"file <- system.file(\"examples\", \"alm.md\", package = \"gistr\") gists(what = \"minepublic\")[[1]] %>% # List my public gists, and index to get just the 1st one   add_files(file) %>% # Add a new file to that gist   update() # update sends a PATCH command to the Gists API to add the file to your gist online file <- system.file(\"examples\", \"alm.md\", package = \"gistr\") g <- gists(what = \"minepublic\")[[1]] g <- add_files(g, file) update(g) file <- system.file(\"examples\", \"alm.md\", package = \"gistr\") update(add_files(gists(what = \"minepublic\")[[1]], file))"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"rate-limit-information","dir":"Articles","previous_headings":"","what":"Rate limit information","title":"gistr introduction","text":"","code":"rate_limit() #> Rate limit: 5000 #> Remaining:  4998 #> Resets in:  59 minutes"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"list-gists","dir":"Articles","previous_headings":"","what":"List gists","title":"gistr introduction","text":"Limiting results keep brief Since certain date/time Request different types gists, one public, minepublic, mineall, starred.","code":"gists(per_page = 2) #> [[1]] #> <gist>721a433293af4cb1fb0f66d7ccb37339 #>   URL: https://gist.github.com/721a433293af4cb1fb0f66d7ccb37339 #>   Description: Atividades 8o Ano #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:22Z / 2020-07-28T20:18:23Z #>   Files: 8o_ano.md #>   Truncated?: FALSE #>  #> [[2]] #> <gist>d1064ad4f7fa9cd30b4409ade98fbd92 #>   URL: https://gist.github.com/d1064ad4f7fa9cd30b4409ade98fbd92 #>   Description: Averdonk Groessen #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:11Z / 2020-07-28T20:18:11Z #>   Files: averdonk-groessen.markdown, index.pug, script.js, scripts, style.sass, styles #>   Truncated?: FALSE, FALSE, FALSE, FALSE, FALSE, FALSE gists(since='2014-05-26T00:00:00Z', per_page = 2) #> [[1]] #> <gist>721a433293af4cb1fb0f66d7ccb37339 #>   URL: https://gist.github.com/721a433293af4cb1fb0f66d7ccb37339 #>   Description: Atividades 8o Ano #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:22Z / 2020-07-28T20:18:23Z #>   Files: 8o_ano.md #>   Truncated?: FALSE #>  #> [[2]] #> <gist>d1064ad4f7fa9cd30b4409ade98fbd92 #>   URL: https://gist.github.com/d1064ad4f7fa9cd30b4409ade98fbd92 #>   Description: Averdonk Groessen #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:11Z / 2020-07-28T20:18:11Z #>   Files: averdonk-groessen.markdown, index.pug, script.js, scripts, style.sass, styles #>   Truncated?: FALSE, FALSE, FALSE, FALSE, FALSE, FALSE gists('minepublic', per_page = 2) #> [[1]] #> <gist>792675323dea1961ce038b2e051d66d4 #>   URL: https://gist.github.com/792675323dea1961ce038b2e051d66d4 #>   Description:  #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:17:34Z / 2020-07-28T20:17:42Z #>   Files: code.R #>   Truncated?: FALSE #>  #> [[2]] #> <gist>98badbaf7334a8a5707418543e178901 #>   URL: https://gist.github.com/98badbaf7334a8a5707418543e178901 #>   Description: a new cool gist #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:17:33Z / 2020-07-28T20:17:33Z #>   Files: stuff.md #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"list-a-single-commit","dir":"Articles","previous_headings":"","what":"List a single commit","title":"gistr introduction","text":"","code":"gist(id = 'f1403260eb92f5dfa7e1') #> <gist>f1403260eb92f5dfa7e1 #>   URL: https://gist.github.com/f1403260eb92f5dfa7e1 #>   Description: Querying bitly from R  #>   Public: TRUE #>   Created/Edited: 2014-10-15T20:40:12Z / 2015-08-29T14:07:43Z #>   Files: bitly_r.md #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"create-gist","dir":"Articles","previous_headings":"","what":"Create gist","title":"gistr introduction","text":"can pass files , wrap gist_create() around code R session/IDE, just function name, {' start }' end.","code":"file <- system.file(\"examples\", \"stuff.md\", package = \"gistr\") gist_create(file, description='a new cool gist', browse = FALSE) #> <gist>f7aa5e70e2fb40f4d92e972bcfa6224f #>   URL: https://gist.github.com/f7aa5e70e2fb40f4d92e972bcfa6224f #>   Description: a new cool gist #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:27Z / 2020-07-28T20:18:27Z #>   Files: stuff.md #>   Truncated?: FALSE gist_create(code={' x <- letters numbers <- runif(8) numbers  [1] 0.3229318 0.5933054 0.7778408 0.3898947 0.1309717 0.7501378 0.3206379 0.3379005 '}) gist_create(code={' x <- letters numbers <- runif(8) numbers  [1] 0.3229318 0.5933054 0.7778408 0.3898947 0.1309717 0.7501378 0.3206379 0.3379005 '}, browse=FALSE) #> <gist>394103ff248f2be67bbccce863a89ca7 #>   URL: https://gist.github.com/394103ff248f2be67bbccce863a89ca7 #>   Description:  #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:29Z / 2020-07-28T20:18:29Z #>   Files: code.R #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"knit-and-create","dir":"Articles","previous_headings":"Create gist","what":"knit and create","title":"gistr introduction","text":"can also knit input file posting gist: code blocks (note code blocks without knitr block demarcations result unexecuted code):","code":"file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") gist_create(file, description='a new cool gist', knit=TRUE) #> <gist>4162b9c53479fbc298db #>   URL: https://gist.github.com/4162b9c53479fbc298db #>   Description: a new cool gist #>   Public: TRUE #>   Created/Edited: 2014-10-27T16:07:31Z / 2014-10-27T16:07:31Z #>   Files: stuff.md #>   Truncated?: FALSE gist_create(code={' x <- letters (numbers <- runif(8)) '}, knit=TRUE) #> <gist>ec45c396dee4aa492139 #>   URL: https://gist.github.com/ec45c396dee4aa492139 #>   Description: #>   Public: TRUE #>   Created/Edited: 2014-10-27T16:09:09Z / 2014-10-27T16:09:09Z #>   Files: file81720d1ceff.md #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"knit-code-from-file-path-code-block-or-gist-file","dir":"Articles","previous_headings":"","what":"knit code from file path, code block, or gist file","title":"gistr introduction","text":"knit local file knit code block (knitr code block notation missing, add ) (result shown) knit file gist, get file first (result shown)","code":"file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") run(file, knitopts = list(quiet=TRUE)) %>% gist_create(browse = FALSE) #> <gist>ceeddf11ebf775a1fe465f6791e15323 #>   URL: https://gist.github.com/ceeddf11ebf775a1fe465f6791e15323 #>   Description:  #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:31Z / 2020-07-28T20:18:31Z #>   Files: stuff.md #>   Truncated?: FALSE run({' x <- letters (numbers <- runif(8)) '}) %>% gist_create gists('minepublic')[[1]] %>% run() %>% update()"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"working-with-images","dir":"Articles","previous_headings":"","what":"working with images","title":"gistr introduction","text":"GitHub API doesn’t let upload binary files (e.g., images) via HTTP API, use gistr. workaround. using .Rmd .Rnw files, can set imgur_inject = TRUE gistr_create() imgur knit options injected top file images uploaded imgur. Alternatively, can , setting knit options use imgur. file already using imgur file already using imgur","code":"file <- system.file(\"examples\", \"plots_imgur.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE) #> <gist>1a6e7f7d6ddb739fce0b #>   URL: https://gist.github.com/1a6e7f7d6ddb739fce0b #>   Description: #>   Public: TRUE #>   Created/Edited: 2015-03-19T00:20:48Z / 2015-03-19T00:20:48Z #>   Files: plots_imgur.md file <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE, imgur_inject = TRUE) #> <gist>ec9987ad245bbc668c72 #>   URL: https://gist.github.com/ec9987ad245bbc668c72 #>   Description: #>   Public: TRUE #>   Created/Edited: 2015-03-19T00:21:13Z / 2015-03-19T00:21:13Z #>   Files: plots.md #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"list-commits-on-a-gist","dir":"Articles","previous_headings":"","what":"List commits on a gist","title":"gistr introduction","text":"","code":"gists()[[1]] %>% commits() #> [[1]] #> <commit> #>   Version: b640145362bb2272c5f0a06ae2aee3241b8f6f59 #>   User: sckott #>   Commited: 2020-07-28T20:18:28Z #>   Commits [total, additions, deletions]: [5,5,0]"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"star-a-gist","dir":"Articles","previous_headings":"","what":"Star a gist","title":"gistr introduction","text":"Star Unstar","code":"gist('cbb0507082bb18ff7e4b') %>% star() #> <gist>cbb0507082bb18ff7e4b #>   URL: https://gist.github.com/cbb0507082bb18ff7e4b #>   Description: This is my technical interview cheat sheet.  Feel free to fork it or do whatever you want with it.  PLEASE let me know if there are any errors or if anything crucial is missing.  I will add more links soon. #>   Public: TRUE #>   Created/Edited: 2014-05-02T19:43:13Z / 2018-04-16T21:11:53Z #>   Files: The Technical Interview Cheat Sheet.md #>   Truncated?: FALSE gist('cbb0507082bb18ff7e4b') %>% unstar() #> <gist>cbb0507082bb18ff7e4b #>   URL: https://gist.github.com/cbb0507082bb18ff7e4b #>   Description: This is my technical interview cheat sheet.  Feel free to fork it or do whatever you want with it.  PLEASE let me know if there are any errors or if anything crucial is missing.  I will add more links soon. #>   Public: TRUE #>   Created/Edited: 2014-05-02T19:43:13Z / 2018-04-16T21:27:36Z #>   Files: The Technical Interview Cheat Sheet.md #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"edit-a-gist","dir":"Articles","previous_headings":"","what":"Edit a gist","title":"gistr introduction","text":"Add files Delete files","code":"file <- system.file(\"examples\", \"alm.md\", package = \"gistr\") gists(what = \"minepublic\")[[1]] %>%   add_files(file) %>%   update() #> <gist>394103ff248f2be67bbccce863a89ca7 #>   URL: https://gist.github.com/394103ff248f2be67bbccce863a89ca7 #>   Description:  #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:29Z / 2020-07-28T20:18:34Z #>   Files: alm.md, code.R #>   Truncated?: FALSE, FALSE file <- system.file(\"examples\", \"alm.md\", package = \"gistr\") gists(what = \"minepublic\")[[1]] %>%   delete_files(file) %>%   update() #> <gist>394103ff248f2be67bbccce863a89ca7 #>   URL: https://gist.github.com/394103ff248f2be67bbccce863a89ca7 #>   Description:  #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:29Z / 2020-07-28T20:18:36Z #>   Files: code.R #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"open-a-gist-in-your-default-browser","dir":"Articles","previous_headings":"","what":"Open a gist in your default browser","title":"gistr introduction","text":"Opens gist default browser","code":"gists()[[1]] %>% browse()"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"get-embed-script","dir":"Articles","previous_headings":"","what":"Get embed script","title":"gistr introduction","text":"","code":"gists()[[1]] %>% embed() #> [1] \"<script src=\\\"https://gist.github.com/anupamgogoi-wso2/9230e4ade0074320ec95992ba2fbf518.js\\\"><\/script>\""},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"list-forks","dir":"Articles","previous_headings":"","what":"List forks","title":"gistr introduction","text":"Returns list gist objects, just like gists()","code":"gist(id='1642874') %>% forks(per_page=2) #> [[1]] #> <gist>1642989 #>   URL: https://gist.github.com/1642989 #>   Description: Spline Transition #>   Public: TRUE #>   Created/Edited: 2012-01-19T21:45:20Z / 2019-10-23T20:09:07Z #>   Files:  #>   Truncated?:  #>  #> [[2]] #> <gist>1643051 #>   URL: https://gist.github.com/1643051 #>   Description: Line Transition (Broken) #>   Public: TRUE #>   Created/Edited: 2012-01-19T21:51:30Z / 2019-10-23T20:08:44Z #>   Files:  #>   Truncated?:"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"fork-a-gist","dir":"Articles","previous_headings":"","what":"Fork a gist","title":"gistr introduction","text":"Returns gist object","code":"g <- gists() (forked <- g[[ sample(seq_along(g), 1) ]] %>% fork()) #> <gist>72a9327aac0cab09900b04a027069ae5 #>   URL: https://gist.github.com/72a9327aac0cab09900b04a027069ae5 #>   Description: Rimworld output log published using HugsLib #>   Public: TRUE #>   Created/Edited: 2020-07-28T20:18:43Z / 2020-07-28T20:18:43Z #>   Files: output_log.txt #>   Truncated?: FALSE"},{"path":"https://docs.ropensci.org/gistr/articles/gistr.html","id":"example-use-cases","dir":"Articles","previous_headings":"","what":"Example use cases","title":"gistr introduction","text":"Round-trip storage data frame Maybe want use gist share data alternative dput? can writing data.frame temporary buffer passing gist_create. can read data back gist passing content read.csv.","code":"data(iris)  str <- '' tc  <- textConnection('str', 'w', local = TRUE) write.csv(iris, file = tc, row.names = FALSE) close(tc)  content <- list(content=paste(as.character(str), collapse='\\n'))  gistr::gist_create(code = {   content$content }, description = \"using a gist as a data store\",  filename = \"iris.csv\") #> <gist>c7dfe593f4944df4818df884689734f9 #>   URL: https://gist.github.com/c7dfe593f4944df4818df884689734f9 #>   Description: using a gist as a data store #>   Public: TRUE #>   Created/Edited: 2019-07-18T14:23:23Z / 2019-07-18T14:23:23Z #>   Files: iris.csv #>   Truncated?: FALSE  output <- read.csv(   text = gist(gists(what = \"minepublic\", per_page = 1)[[1]]$id)$     files$iris.csv$content)  identical(output, iris) #> TRUE"},{"path":"https://docs.ropensci.org/gistr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer. Ramnath Vaidyanathan. Author. Karthik Ram. Author. Milgram Eric. Author.","code":""},{"path":"https://docs.ropensci.org/gistr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Vaidyanathan R, Ram K, Eric M (2024). gistr: Work 'GitHub' 'Gists'. R package version 0.9.0.93,  https://docs.ropensci.org/gistr (website), https://github.com/ropensci/gistr (devel).","code":"@Manual{,   title = {gistr: Work with 'GitHub' 'Gists'},   author = {Scott Chamberlain and Ramnath Vaidyanathan and Karthik Ram and Milgram Eric},   year = {2024},   note = {R package version 0.9.0.93,  https://docs.ropensci.org/gistr (website)},   url = {https://github.com/ropensci/gistr (devel)}, }"},{"path":"https://docs.ropensci.org/gistr/index.html","id":"gistr","dir":"","previous_headings":"","what":"Work with GitHub Gists","title":"Work with GitHub Gists","text":"gistr light interface GitHub’s gists R. Get started docs: https://docs.ropensci.org/gistr","code":""},{"path":"https://docs.ropensci.org/gistr/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also:","title":"Work with GitHub Gists","text":"git2r R client libgit2 C library Stefan Widgren gert Simple git client R Jeroen Ooms gistfo turning untitled RStudio tabs gists!","code":""},{"path":"https://docs.ropensci.org/gistr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Work with GitHub Gists","text":"Stable version CRAN dev version GitHub.","code":"install.packages(\"gistr\") remotes::install_github(\"ropensci/gistr\") library(\"gistr\") #>  #> Attaching package: 'gistr' #> The following objects are masked from 'package:stats': #>  #>     embed, update"},{"path":"https://docs.ropensci.org/gistr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Work with GitHub Gists","text":"Please report issues bugs. License: MIT Get citation information gistr R citation(package = 'gistr') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/gistr/reference/browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a gist on GitHub — browse","title":"Open a gist on GitHub — browse","text":"Open gist GitHub","code":""},{"path":"https://docs.ropensci.org/gistr/reference/browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a gist on GitHub — browse","text":"","code":"browse(gist, what = \"html\")"},{"path":"https://docs.ropensci.org/gistr/reference/browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a gist on GitHub — browse","text":"gist gist object something can coerced gist object. One html (default), json, forks, commits, comments.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/commits.html","id":null,"dir":"Reference","previous_headings":"","what":"List gist commits — commits","title":"List gist commits — commits","text":"List gist commits","code":""},{"path":"https://docs.ropensci.org/gistr/reference/commits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List gist commits — commits","text":"","code":"commits(gist, page = NULL, per_page = 30, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/commits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List gist commits — commits","text":"gist gist object something coerceable gist page (integer) Page number return. per_page (integer) Number items return per page. Default 30. Max 100. ... named args crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/commits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List gist commits — commits","text":"","code":"if (FALSE) { gists()[[1]] %>% commits() gist(id = '1f399774e9ecc9153a6f') %>% commits(per_page = 5)  # pass in a url gist(\"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\") %>% commits }"},{"path":"https://docs.ropensci.org/gistr/reference/create_gists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create gists — create_gists","title":"Create gists — create_gists","text":"Creating gists gistr can done three functions: gist_create() - Create gists files code blocks, using  GitHub HTTP API. function uses GitHub HTTP API, work binary files. However, can get around images using knitr's hook upload images eg., imgur. addition, difficult include artifacts knit-ing process. gist_create_git() - Create gists files code blocks, using  git. function uses git, flexibility function: can include binary files, can easily upload artifacts. gist_create_obj() - Create gists R objects: data.frame, list, character string, matrix, numeric. Uses GitHub HTTP API. may seem bit odd three separate functions creating gists. gist_create() created first, bit, idea create gists via git (gist_create_git()) R objects (gist_create_obj()), made sense different API creating gists via HTTP API, git, R objects. thrown everything gist_create(), massive function, far many parameters.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a gist — delete","title":"Delete a gist — delete","text":"Delete gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a gist — delete","text":"","code":"delete(gist, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a gist — delete","text":"gist gist object something coerceable gist ... Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a gist — delete","text":"","code":"if (FALSE) { gists(\"minepublic\")[[29]] %>% delete() }"},{"path":"https://docs.ropensci.org/gistr/reference/embed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get embed script for a gist — embed","title":"Get embed script for a gist — embed","text":"Get embed script gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/embed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get embed script for a gist — embed","text":"","code":"embed(gist)"},{"path":"https://docs.ropensci.org/gistr/reference/embed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get embed script for a gist — embed","text":"gist gist object something can coerced gist object.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/embed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get embed script for a gist — embed","text":"","code":"if (FALSE) { gists()[[1]] %>% embed()  # pass in a url gist(\"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\") %>% embed }"},{"path":"https://docs.ropensci.org/gistr/reference/files.html","id":null,"dir":"Reference","previous_headings":"","what":"Add files to a gist object — add_files","title":"Add files to a gist object — add_files","text":"Add files gist object","code":""},{"path":"https://docs.ropensci.org/gistr/reference/files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add files to a gist object — add_files","text":"","code":"add_files(gist, ...)  update_files(gist, ...)  delete_files(gist, ...)  rename_files(gist, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add files to a gist object — add_files","text":"gist gist object something coerceable gist ... Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add files to a gist object — add_files","text":"","code":"if (FALSE) { add_files(\"~/stuff.Rmd\") # update_files() # delete_files() # rename_files() }"},{"path":"https://docs.ropensci.org/gistr/reference/fork.html","id":null,"dir":"Reference","previous_headings":"","what":"Fork a gist — fork","title":"Fork a gist — fork","text":"Fork gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/fork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fork a gist — fork","text":"","code":"fork(gist, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/fork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fork a gist — fork","text":"gist gist object something coerceable gist ... named args crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/fork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fork a gist — fork","text":"gist class object","code":""},{"path":"https://docs.ropensci.org/gistr/reference/fork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fork a gist — fork","text":"","code":"if (FALSE) { # fork a gist w <- gists()[[1]] %>% fork()  # browse to newly forked gist browse(w) }"},{"path":"https://docs.ropensci.org/gistr/reference/forks.html","id":null,"dir":"Reference","previous_headings":"","what":"List forks on a gist — forks","title":"List forks on a gist — forks","text":"List forks gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/forks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List forks on a gist — forks","text":"","code":"forks(gist, page = NULL, per_page = 30, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/forks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List forks on a gist — forks","text":"gist gist object something coerceable gist page (integer) Page number return. per_page (integer) Number items return per page. Default 30. Max 100. ... named args crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/forks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List forks on a gist — forks","text":"list gist class objects","code":""},{"path":"https://docs.ropensci.org/gistr/reference/forks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List forks on a gist — forks","text":"","code":"if (FALSE) { gist(id='1642874') %>% forks(per_page=2) gist(id = \"8172796\") %>% forks()  # pass in a url gist(\"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\") %>% forks  }"},{"path":"https://docs.ropensci.org/gistr/reference/gist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a gist — gist","title":"Get a gist — gist","text":"Get gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a gist — gist","text":"","code":"gist(id, revision = NULL, ...)  as.gist(x)"},{"path":"https://docs.ropensci.org/gistr/reference/gist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a gist — gist","text":"id (character) gist id, gist URL revision (character) sha. optional ... Curl options passed verb-GET x Object coerce. Can integer (gist id), string (gist id), gist, list can coerced gist.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a gist — gist","text":"file larger ~1 MB, content file given back truncated, get entire contents. return S3 object printed, tell bottom whether file truncated . file , simply get raw_url URL file (see example ), retrieve . file big, may need clone file using git, etc.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a gist — gist","text":"","code":"if (FALSE) { gist('f1403260eb92f5dfa7e1')  as.gist('f1403260eb92f5dfa7e1') as.gist(10) as.gist(gist('f1403260eb92f5dfa7e1'))  # get a specific revision of a gist id <- 'c1e2cb547d9f22bd314da50fe9c7b503' gist(id, 'a5bc5c143beb697f23b2c320ff5a8dacf960b0f3') gist(id, 'b70d94a8222a4326dff46fc85bc69d0179bd1da2') gist(id, '648bb44ab9ae59d57b4ea5de7d85e24103717e8b') gist(id, '0259b13c7653dc95e20193133bcf71811888cbe6')  # from a url, or partial url x <- \"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\" x <- \"gist.github.com/expersso/4ac33b9c00751fddc7f8\" x <- \"gist.github.com/4ac33b9c00751fddc7f8\" x <- \"expersso/4ac33b9c00751fddc7f8\" as.gist(x)  ids <- sapply(gists(), \"[[\", \"id\") gist(ids[1]) gist(ids[2]) gist(ids[3]) gist(ids[4])  gist(ids[1]) %>% browse()  ## If a gist file is > a certain size it is truncated ## in this case, we let you know in the return object that it is truncated ## e.g. (bigfile <- gist(id = \"b74b878fd7d9176a4c52\")) ## then get the raw_url, and retrieve the file url <- bigfile$files$`plossmall.json`$raw_url }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorize with GitHub. — gist_auth","title":"Authorize with GitHub. — gist_auth","text":"function run automatically allow gistr access GitHub account.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorize with GitHub. — gist_auth","text":"","code":"gist_auth(app = gistr_app, reauth = FALSE)"},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorize with GitHub. — gist_auth","text":"app httr::oauth_app() GitHub. default uses application gistr_oauth created Scott Chamberlain. reauth (logical) Force re-authorization?","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authorize with GitHub. — gist_auth","text":"named list, single slot Authorization, single element token - expected format needed passed http request","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorize with GitHub. — gist_auth","text":"two ways authorise gistr work GitHub account: Generate personal access token gist scope selected, set GITHUB_PAT environment variable per session using Sys.setenv across sessions adding .Renviron file similar. See https://help.github.com/articles/creating--access-token--command-line-use help Interactively login GitHub account authorise OAuth. Using GITHUB_PAT recommended.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authorize with GitHub. — gist_auth","text":"","code":"if (FALSE) { gist_auth() }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gist — gist_create","title":"Create a gist — gist_create","text":"Create gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gist — gist_create","text":"","code":"gist_create(   files = NULL,   description = \"\",   public = TRUE,   browse = TRUE,   code = NULL,   filename = \"code.R\",   knit = FALSE,   knitopts = list(),   renderopts = list(),   include_source = FALSE,   imgur_inject = FALSE,   rmarkdown = FALSE,   ... )"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gist — gist_create","text":"files Files upload. code param must passed description (character) Brief description gist (optional) public (logical) Whether gist public (default: TRUE) browse (logical) open newly create gist default browser (default: TRUE) code Pass set code. can single R object, many lines code wrapped quotes, curly brackets (see examples ). files param must passed filename Name file create, used code parameter used. Default code.R knit (logical) Knit code posting gist? file .Rmd  .Rnw extension, run file knit, .R extension, use render knitopts, renderopts (list) List variables passed knit, render include_source (logical) applies knit=TRUE. Include source file gist addition knitted output. imgur_inject (logical) Inject imgur_upload .Rmd file upload files https://imgur.com/. ignored  file sweave/latex file rendered pdf uploaded anyway. Default: FALSE rmarkdown (logical) TRUE, use rmarkdown::render() instead knitr::knit() render document. ... args passed verb-POST","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gistr/reference/gist_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gist — gist_create","text":"","code":"if (FALSE) { file <- tempfile() cat(\"hello world\", file = file) gist_create(files=file, description='a new cool gist')  file1 <- tempfile() file2 <- tempfile() cat(\"foo bar\", file = file1) cat(\"foo bar\", file = file2) gist_create(files=c(file1, file2), description='spocc demo files')  # include any code by passing to the code parameter gist_create(code={' x <- letters numbers <- runif(10) numbers '})  # Knit an .Rmd file before posting as a gist file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") gist_create(file, description='a new cool gist', knit=TRUE)  file <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") gist_create(file, description='some plots', knit=TRUE)  # an .Rnw file file <- system.file(\"examples\", \"rnw_example.Rnw\", package = \"gistr\") gist_create(file) gist_create(file, knit=TRUE)  # Knit code input before posting as a gist gist_create(code={' ```{r} x <- letters (numbers <- runif(8)) ``` '}, knit=TRUE)  url <- \"https://raw.githubusercontent.com/ropensci/geojsonio/master/inst/examples/zillow_or.geojson\" json <- crul::HttpClient$new(url)$get()$parse(\"UTF-8\") gist_create(code = json, filename = \"zillow_or.geojson\")  # Knit and include source file, so both files are in the gist file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE, include_source=TRUE)  gist_create(code={' ```{r} x <- letters (numbers <- runif(8)) ``` '}, filename=\"code.Rmd\", knit=TRUE, include_source=TRUE)  # Uploading images created during knit process ## using imgur - if you're file uses imgur or similar, you're good file <- system.file(\"examples\", \"plots_imgur.Rmd\", package = \"gistr\") cat(readLines(file), sep = \"\\n\") # peek at file gist_create(file, knit=TRUE) ## if not, GitHub doesn't allow upload of binary files via the HTTP API  ## (which gistr uses) - so see gist_create_git(), which uses git file <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE, imgur_inject = TRUE) ## works with ggplot2 as well file <- system.file(\"examples\", \"ggplot_imgur.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE)  # Render `.R` files file <- system.file(\"examples\", \"example1.R\", package = \"gistr\") cat(readLines(file), sep = \"\\n\") # peek at file gist_create(file, knit = TRUE) gist_create(file, knit = TRUE, include_source = TRUE) ## many files (file1 <- system.file(\"examples\", \"example1.R\", package = \"gistr\")) (file2 <- system.file(\"examples\", \"example2.R\", package = \"gistr\")) cat(readLines(file1), sep = \"\\n\") # peek at file cat(readLines(file2), sep = \"\\n\") # peek at file gist_create(files=list(file1, file2), knit = TRUE) ### three at once, some .R and some .Rmd file3 <- system.file(\"examples\", \"plots_imgur.Rmd\", package = \"gistr\") gist_create(files=list(file1, file2, file3), knit = TRUE) gist_create(files=list(file1, file2, file3), knit = TRUE,    include_source = TRUE)  # Use rmarkdown::render instead of knitr::knit file <- system.file(\"examples\", \"rmarkdown_eg.Rmd\", package = \"gistr\") gist_create(file, knit = TRUE, rmarkdown = TRUE, imgur_inject = TRUE,    renderopts = list(output_format = \"md_document\")) }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_git.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","title":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","text":"Create gist via git instead GitHub Gists HTTP API","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_git.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","text":"","code":"gist_create_git(   files = NULL,   description = \"\",   public = TRUE,   browse = TRUE,   knit = FALSE,   code = NULL,   filename = \"code.R\",   knitopts = list(),   renderopts = list(),   include_source = FALSE,   artifacts = FALSE,   imgur_inject = FALSE,   git_method = \"ssh\",   sleep = 1,   ... )"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_git.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","text":"files Files upload. code param must passed description (character) Brief description gist (optional) public (logical) Whether gist public (default: TRUE) browse (logical) open newly create gist default browser (default: TRUE) knit (logical) Knit code posting gist? file .Rmd  .Rnw extension, run file knit, .R extension, use render code Pass set code. can single R object, many lines code wrapped quotes, curly brackets (see examples ). files param must passed filename Name file create, used code parameter used. Default code.R knitopts, renderopts (list) List variables passed knit, render include_source (logical) applies knit=TRUE. Include source file gist addition knitted output. artifacts (logical/character) Include artifacts . TRUE, includes artifacts. can pass file extension upload artifacts certain file exensions. Default: FALSE imgur_inject (logical) Inject imgur_upload .Rmd file upload files https://imgur.com/. ignored  file sweave/latex file rendered pdf uploaded anyway. Default: FALSE git_method (character) One ssh (default) https. remote already exists, use remote, parameter ignored. sleep (integer) Seconds sleep creating gist, collecting metadata gist. uploading lot stuff, may want set higher value, otherwise, may get accurate metadata gist. can course always refresh afterwards calling gist gist id. ... args passed verb-POST","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_git.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","text":"Note browse=TRUE slight delay open gist default browser data display gist. function sleep guess ready, instead open gist right done sending data GitHub. Make sure refresh page see content right away. Likewise, object returned function call may updated correct file information. can retrieve easily calling gist() gist id. function uses git instead HTTP API, thus requires R package git2r. git2r installed, try use function, stop tell install git2r. function using git better suited gist_create() use cases involving: Big files - GitHub API allows files 1 MB size. Using git can get around limit. Binary files - Often artifacts created binary files like .png. GitHub API allow transport binary files, can git. Another difference function gist_create() function can collect artifacts coming knit process. gist somehow deleted, remote changes, try push gist , everything fine. now use tryCatch  push attempt, fails, add new remote (means new gist), push .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_git.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gist via git instead of the GitHub Gists HTTP API — gist_create_git","text":"","code":"if (FALSE) { # prepare a directory and a file unlink(\"~/gitgist\", recursive = TRUE) dir.create(\"~/gitgist\") file <- system.file(\"examples\", \"stuff.md\", package = \"gistr\") writeLines(readLines(file), con = \"~/gitgist/stuff.md\")  # create a gist gist_create_git(files = \"~/gitgist/stuff.md\")  ## more than one file can be passed in unlink(\"~/gitgist2\", recursive = TRUE) dir.create(\"~/gitgist2\") file.copy(file, \"~/gitgist2/\") cat(\"hello world\", file = \"~/gitgist2/hello_world.md\") list.files(\"~/gitgist2\") gist_create_git(c(\"~/gitgist2/stuff.md\", \"~/gitgist2/hello_world.md\"))  # Include all files in a directory unlink(\"~/gitgist3\", recursive = TRUE) dir.create(\"~/gitgist3\") cat(\"foo bar\", file=\"~/gitgist3/foobar.txt\") cat(\"hello\", file=\"~/gitgist3/hello.txt\") list.files(\"~/gitgist3\") gist_create_git(\"~/gitgist3\")  # binary files png <- system.file(\"examples\", \"file.png\", package = \"gistr\") unlink(\"~/gitgist4\", recursive = TRUE) dir.create(\"~/gitgist4\") file.copy(png, \"~/gitgist4/\") list.files(\"~/gitgist4\") gist_create_git(files = \"~/gitgist4/file.png\")  # knit files first, then push up # note: by default we don't upload images, but you can do that,  # see next example rmd <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") unlink(\"~/gitgist5\", recursive = TRUE) dir.create(\"~/gitgist5\") file.copy(rmd, \"~/gitgist5/\") list.files(\"~/gitgist5\") gist_create_git(\"~/gitgist5/plots.Rmd\", knit = TRUE)  # collect all/any artifacts from knitting process arts <- system.file(\"examples\", \"artifacts_eg1.Rmd\", package = \"gistr\") unlink(\"~/gitgist6\", recursive = TRUE) dir.create(\"~/gitgist6\") file.copy(arts, \"~/gitgist6/\") list.files(\"~/gitgist6\") gist_create_git(\"~/gitgist6/artifacts_eg1.Rmd\", knit = TRUE,     artifacts = TRUE)  # from a code block gist_create_git(code={' x <- letters numbers <- runif(8) numbers  [1] 0.3229318 0.5933054 0.7778408 0.3898947 0.1309717 0.7501378 0.3206379 0.3379005 '}, filename=\"my_cool_code.R\")  # Use https instead of ssh png <- system.file(\"examples\", \"file.png\", package = \"gistr\") unlink(\"~/gitgist7\", recursive = TRUE) dir.create(\"~/gitgist7\") file.copy(png, \"~/gitgist7/\") list.files(\"~/gitgist7\") gist_create_git(files = \"~/gitgist7/file.png\", git_method = \"https\") }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gist from an R object — gist_create_obj","title":"Create a gist from an R object — gist_create_obj","text":"Create gist R object","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gist from an R object — gist_create_obj","text":"","code":"gist_create_obj(   x = NULL,   description = \"\",   public = TRUE,   browse = TRUE,   pretty = TRUE,   filename = \"file.txt\",   ... )"},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gist from an R object — gist_create_obj","text":"x R object, data.frame, matrix, list, character, numeric description (character) Brief description gist (optional) public (logical) Whether gist public (default: TRUE) browse (logical) open newly create gist default browser (default: TRUE) pretty (logical) data.frame matrix objects, create markdown table. FALSE, pushes json. (default: TRUE) filename Name file create. Default: file.txt ... args passed crul::verb-POST","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_obj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gist from an R object — gist_create_obj","text":"function specifically going R objects gist, whereas gist_create() going files executing code","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gistr/reference/gist_create_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gist from an R object — gist_create_obj","text":"","code":"if (FALSE) { ## data.frame ### by default makes pretty table in markdown format row.names(mtcars) <- NULL gist_create_obj(mtcars) gist_create_obj(iris) ### or just push up json gist_create_obj(mtcars, pretty = FALSE)  ## matrix gist_create_obj(as.matrix(mtcars)) ## list gist_create_obj(apply(mtcars, 1, as.list)) ## character gist_create_obj(\"hello, world\") ## numeric gist_create_obj(runif(10))  ## Assign a specific file name gist_create_obj(\" ## header2  hey there!\", filename = \"my_markdown.md\") }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens a full screen map after uploading a geojson file — gist_map","title":"Opens a full screen map after uploading a geojson file — gist_map","text":"Takes gist object input geojson file name renders fullscreen map","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens a full screen map after uploading a geojson file — gist_map","text":"","code":"gist_map(x, browse = TRUE)"},{"path":"https://docs.ropensci.org/gistr/reference/gist_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Opens a full screen map after uploading a geojson file — gist_map","text":"x object class gist generated gist_create() gist_create_obj() browse Default: TRUE. Set FALSE want automatically browse URL.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opens a full screen map after uploading a geojson file — gist_map","text":"","code":"if (FALSE) { file <- system.file(\"examples\", \"ecoengine_eg.geojson\", package = \"gistr\") gist_id <- gist_create(file, browse = FALSE) gist_map(gist_id) }"},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save gist files to disk — gist_save","title":"Save gist files to disk — gist_save","text":"Save gist files disk","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save gist files to disk — gist_save","text":"","code":"gist_save(gist, path = \".\")  gist_open(x)"},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save gist files to disk — gist_save","text":"gist gist object something coerceable gist path Root path write , directory, file b/c gist can contain  many files. folder created name gist id within root directory.  File names given gist. x object class gist_files (output gist_save()","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save gist files to disk — gist_save","text":"object class gist_files, S3 object containing file paths","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save gist files to disk — gist_save","text":"gist_save: files written new folder, named gist id, e.g., a65ac7e56b7b3f746913 gist_open: opens files editor/R GUI. Internally, uses file.edit() open files, using getOption(\"editor\") open files. R.app RStudio, IDE's, files open IDE (think).","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gist_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save gist files to disk — gist_save","text":"","code":"if (FALSE) { gist(\"a65ac7e56b7b3f746913\") %>% gist_save() gist(\"a65ac7e56b7b3f746913\") %>% gist_save() %>% gist_open() gist(\"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\") %>%   gist_save() }"},{"path":"https://docs.ropensci.org/gistr/reference/gistr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R client for GitHub gists — gistr-package","title":"R client for GitHub gists — gistr-package","text":"R client GitHub gists.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gistr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R client for GitHub gists — gistr-package","text":"gistr allows peform actions gists, including listing, forking, starring, creating, deleting, updating, etc. two ways authorise gistr work GitHub account: Generate personal access token (PAT) https://docs.github.com/en/github/authenticating--github/creating--personal-access-token record GITHUB_PAT envar. Interactively login GitHub account authorise OAuth. Using GITHUB_PAT recommended.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gistr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R client for GitHub gists — gistr-package","text":"Scott Chamberlain myrmecocystus@gmail.com Ramnath Vaidyanathan ramnath.vaidya@gmail.com Karthik Ram karthik.ram@gmail.com","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gists.html","id":null,"dir":"Reference","previous_headings":"","what":"List gists — gists","title":"List gists — gists","text":"List public gists, public gists, gists, gist id, query date.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List gists — gists","text":"","code":"gists(what = \"public\", since = NULL, page = NULL, per_page = 30, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/gists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List gists — gists","text":"(character) gists return. One public, minepublic, mineall, starred. id given gist, parameter ignored. since (character) timestamp ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. gists updated time returned. page (integer) Page number return. per_page (integer) Number items return per page. Default 30. Max 100. ... Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List gists — gists","text":"= \"mineall\", use getOption(\"github.username\") internally get GitHub user name. Make sure set GitHub user name R option like options(github.username = \"foobar\") .Rprofile file. find user name, stop error.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/gists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List gists — gists","text":"","code":"if (FALSE) { # Public gists gists() gists(per_page=2) gists(page=3) # Public gists created since X time gists(since='2014-05-26T00:00:00Z') # Your public gists gists('minepublic') gists('minepublic', per_page=2) # Your private and public gists gists('mineall') # Your starred gists gists('starred') # pass in curl options gists(per_page=1, verbose=TRUE) }"},{"path":"https://docs.ropensci.org/gistr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"https://docs.ropensci.org/gistr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/gistr/reference/rate_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rate limit information — rate_limit","title":"Get rate limit information — rate_limit","text":"Get rate limit information","code":""},{"path":"https://docs.ropensci.org/gistr/reference/rate_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rate limit information — rate_limit","text":"","code":"rate_limit(...)"},{"path":"https://docs.ropensci.org/gistr/reference/rate_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rate limit information — rate_limit","text":"... Named args crul::verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/rate_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rate limit information — rate_limit","text":"","code":"if (FALSE) { rate_limit() }"},{"path":"https://docs.ropensci.org/gistr/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a .Rmd file — run","title":"Run a .Rmd file — run","text":"Run .Rmd file","code":""},{"path":"https://docs.ropensci.org/gistr/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a .Rmd file — run","text":"","code":"run(x, filename = \"code.R\", knitopts = list())"},{"path":"https://docs.ropensci.org/gistr/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a .Rmd file — run","text":"x Input, one : code wrapped curly brackets quotes, file path .Rmd file, gist. filename Name file create, used code parameter used. Default code.R knitopts (list) List variables passed knitr::knit()","code":""},{"path":"https://docs.ropensci.org/gistr/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a .Rmd file — run","text":"path, unless gist object passed , case gist object returned.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a .Rmd file — run","text":"","code":"if (FALSE) { # run a local file file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") run(file) %>% gist_create  # run code run({' ```{r} x <- letters (numbers <- runif(8)) ``` '}) %>% gist_create  # run a file from a gist, has to get file first gists('minepublic')[[2]] %>% run() %>% update() }"},{"path":"https://docs.ropensci.org/gistr/reference/star.html","id":null,"dir":"Reference","previous_headings":"","what":"Star a gist — star","title":"Star a gist — star","text":"Star gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Star a gist — star","text":"","code":"star(gist, ...)  unstar(gist, ...)  star_check(gist, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Star a gist — star","text":"gist gist object something can coerced gist object. ... Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Star a gist — star","text":"message, gist object, one input function.","code":""},{"path":"https://docs.ropensci.org/gistr/reference/star.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Star a gist — star","text":"","code":"if (FALSE) { id <- '4ac33b9c00751fddc7f8' gist(id) %>% star() gist(id) %>% star_check() gist(id) %>% unstar() gist(id) %>% unstar() %>% star() gist(id) %>% star_check() gist(id) %>%   star() %>%   star_check()    # pass in a url x <- \"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\" gist(x) %>% star gist(x) %>% unstar }"},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a table from gist or commit class or a list of either — tabl","title":"Make a table from gist or commit class or a list of either — tabl","text":"Make table gist commit class list either","code":""},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a table from gist or commit class or a list of either — tabl","text":"","code":"tabl(x, ...)  tabl_data(x)"},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a table from gist or commit class or a list of either — tabl","text":"x Either gist commit class object list either ... Ignored","code":""},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a table from gist or commit class or a list of either — tabl","text":"data.frame list data.frame's","code":""},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a table from gist or commit class or a list of either — tabl","text":"commits return single data.frame. gists, always return list returning data consistently, regardless variable return data. can always index main data.frame gist metadata file info result$data, likewise  forks result$forks history result$history","code":""},{"path":"https://docs.ropensci.org/gistr/reference/tabl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a table from gist or commit class or a list of either — tabl","text":"","code":"if (FALSE) { # from a gist object x <- as.gist('f1403260eb92f5dfa7e1') res <- tabl(x) res$data res$forks res$history  # from a list ss <- gists('minepublic') tabl(ss[1:3]) lapply(tabl(ss[1:3]), \"[[\", \"data\") # index to data slots, but also make single data.frame tabl_data(tabl(ss[1:3])) ## manipulate with dplyr library(\"dplyr\") tabl_data(tabl(ss[1:30])) %>%    select(id, description, owner_login) %>%    filter(grepl(\"gist gist gist\", description))  # commits x <- gists()[[2]] %>% commits() tabl(x[[1]])  ## many x <- sapply(gists(per_page = 100), commits) tabl(x) %>%   select(id, login, change_status.total, url) %>%    filter(change_status.total > 50)    # pass in a url gist(\"https://gist.github.com/expersso/4ac33b9c00751fddc7f8\") %>% tabl ## many gg <- gists() (urls <- vapply(gg, \"[[\", \"\", \"html_url\")) lapply(urls[1:5], as.gist) %>% tabl()  # gist with forks and history gist('1642874') %>% tabl  # gist with history, no forks gist('c96d2e453c95d0166408') %>% tabl  }"},{"path":"https://docs.ropensci.org/gistr/reference/update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update/modify a gist — update","title":"Update/modify a gist — update","text":"Update/modify gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update/modify a gist — update","text":"","code":"update(gist, description = gist$description, ...)"},{"path":"https://docs.ropensci.org/gistr/reference/update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update/modify a gist — update","text":"gist gist object something coerceable gist description (character) Brief description gist (optional) ... Curl options passed verb-GET","code":""},{"path":"https://docs.ropensci.org/gistr/reference/update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update/modify a gist — update","text":"object class gist","code":""},{"path":"https://docs.ropensci.org/gistr/reference/update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update/modify a gist — update","text":"","code":"if (FALSE) { file1 <- system.file(\"examples\", \"alm.md\", package = \"gistr\") file2 <- system.file(\"examples\", \"zoo.json\", package = \"gistr\")  # add new files gists(what = \"minepublic\")[[3]] %>%  add_files(file1, file2) %>%  update()  # update existing files ### file name has to match to current name gists(what = \"minepublic\")[[3]] %>%  update_files(file1) %>%  update()  # delete existing files ### again, file name has to match to current name gists(what = \"minepublic\")[[3]] %>%  delete_files(file1, file2) %>%  update()  # rename existing files # For some reason, this operation has to upload the content too ### first name is old file name with path (must match), and second is  ### new file name (w/o path) ## add first gists(what = \"minepublic\")[[3]] %>%  add_files(file1, file2) %>%  update() ## then rename gists(what = \"minepublic\")[[3]] %>%  rename_files(list(file1, \"newfile.md\")) %>%  update() ### you can pass in many renames gists(what = \"minepublic\")[[3]] %>%  rename_files(list(file1, \"what.md\"), list(file2, \"new.json\")) %>%  update() }"},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-090","dir":"Changelog","previous_headings":"","what":"gistr 0.9.0","title":"gistr 0.9.0","text":"CRAN release: 2020-07-29","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.9.0","text":"replace httr crul oauth handling (#68) fix internal fxn stopstatus() handle correctly detecting scope header issues (#82) fixed old urls changed","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-050","dir":"Changelog","previous_headings":"","what":"gistr 0.5.0","title":"gistr 0.5.0","text":"CRAN release: 2020-01-09","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.5.0","text":"vignette gains example round-tripping data.frame gist back gist data.frame (#78) (#79) thanks @jsta update package docs throughout tell users make sure create GitHub PAT (personal access token) gist scope (#80)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.5.0","text":"fix gist_create(): fail files code params NULL (user pass something ) (#72) thanks @maelle","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-042","dir":"Changelog","previous_headings":"","what":"gistr 0.4.2","title":"gistr 0.4.2","text":"CRAN release: 2018-06-28","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"new-features-0-4-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"gistr 0.4.2","text":"gist() gains parameter revision request specific revision gists. note returned brief print gist console may vary revision revision, underlying data correct data revision (#71)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-4-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.4.2","text":"affecting functions create data gist_create(), gist_create_git(), gist_create_obj(), update(), delete(): GitHub good reason gives 404 authentication issues. common problem user incorrect missing scopes. now attempt detect scope problem specifically throw message happens (#70) toggle whether index git path @ vs. $ depending git2r package version; upcoming version git2r (#74)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-040","dir":"Changelog","previous_headings":"","what":"gistr 0.4.0","title":"gistr 0.4.0","text":"CRAN release: 2017-04-20","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.4.0","text":"Change dplyr::rbind_all instances dplyr::bind_rows (#69)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.4.0","text":"Fix gists() internals github.username set user selects = \"mineall\" - now stops informative message setting github.username option (#66) (#67) thanks @sboysel","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-036","dir":"Changelog","previous_headings":"","what":"gistr 0.3.6","title":"gistr 0.3.6","text":"CRAN release: 2015-12-22","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-3-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.3.6","text":"Added tests .gist()","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-3-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.3.6","text":"Fix .gist.list() method break sometimes keys returned JSON content github API (#63) Fix update() work correctly deleting files. didn’t previously set null’s correctly (#64)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-034","dir":"Changelog","previous_headings":"","what":"gistr 0.3.4","title":"gistr 0.3.4","text":"CRAN release: 2015-10-10","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"new-features-0-3-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"gistr 0.3.4","text":"Gained new function gist_create_git() - creates gists using git instead GitHub Gists HTTP API. Uses package git2r internally git things. (#50) function around , CRAN version, fixes note case ’re interested: (#56) (#57) (#58) (#59) (#61)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.3.4","text":"Added new manual file ?create_gists details three different ways create gists, differ, three different functions create gist. (57f13a711fb7a1514caee6a858d4cda31d614e6f)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.3.4","text":"Fix tabl() give back cleaner data output, returning main metadata gist single data.frame, forks history separate data.frame’s exist. Makes easier understanding manipulation downstream. (#54)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-030","dir":"Changelog","previous_headings":"","what":"gistr 0.3.0","title":"gistr 0.3.0","text":"CRAN release: 2015-07-03","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"gistr 0.3.0","text":"Gained new function gistr_save() save gist files disk easily optionally open editor/R GUI (#47). addition, files saved directory, dir named gist id (#49) gist() now accepts either gist ID full partial URL’s gist (#48)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.3.0","text":"Can now optionally use rmarkdown::render() gist_create() (#52) Explicitly import non-base R pkg functions, importing utils, methods, stats (#53) Can now toggle use rmarkdown package parameter gist_create() (#52) Better error messages GitHub API (#42)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.3.0","text":"Fixed problem httr v1 empty list allowed pass query parameter GET (#51)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-020","dir":"Changelog","previous_headings":"","what":"gistr 0.2.0","title":"gistr 0.2.0","text":"CRAN release: 2015-05-01","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"gistr 0.2.0","text":"gistr_create() can now optionally include source file knit=TRUE using new parameter include_source (#19) new function gist_create_obj() create gist directly R object, like numeric, list, character, data.frame, matrix (#36) (#44) new function gist_map() open full page map default browser gist gist creation (#23) new function tabl() (weird function name avoid table function base R). function goal make easier play gist data. Data given back GitHub API great, nested list format (conversion JSON) - rather hard manipulate. tabl() makes data.frame output gist(), gists(), .gist(), commits() (#25)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"gistr 0.2.0","text":"gistr_create() works .Rnw files, example .Rnw file included package. (#20) Added ability gist_create() optionally include source file passed function call knit=TRUE (#19) Added ability inject imgur hooks knitted document images can rendered gist automatically. GitHub HTTP API doesn’t allow binary uploads (e.g., images), parameter imgur_inject uploads images imgur embeds links images document. (#33) Improved information truncation. request gist larger 1MB, returned object says ’s truncated. can download whole thing using raw_url, larger 10 MB git_pull_url. (#26)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"gistr 0.2.0","text":"Fixed unicode problem Windows (#37) Improved error catching (#28) gist_create() now works R script, didn’t (#29)","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"gistr-010","dir":"Changelog","previous_headings":"","what":"gistr 0.1.0","title":"gistr 0.1.0","text":"CRAN release: 2015-01-04","code":""},{"path":"https://docs.ropensci.org/gistr/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"gistr 0.1.0","text":"released CRAN","code":""}]
